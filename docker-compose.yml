version: "3.8"

services:
  aiops-platform:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aiops-platform
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      # MCP服务地址
      - MCP_SERVER_URL=http://aiops-mcp:9000
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
      - ./deploy/kubernetes:/app/deploy/kubernetes
    depends_on:
      - prometheus
      - ollama
      - redis
      - aiops-mcp
    restart: unless-stopped
    networks:
      - aiops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  aiops-mcp:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    container_name: aiops-mcp
    ports:
      - "9000:9000"
    env_file:
      - .env
    environment:
      # MCP服务配置
      - MCP_SERVER_URL=http://0.0.0.0:9000
      - HOST=0.0.0.0
      - PORT=9000
      # Kubernetes配置
      - K8S_IN_CLUSTER=${K8S_IN_CLUSTER:-false}
      - K8S_CONFIG_PATH=/app/deploy/kubernetes/config
      - K8S_NAMESPACE=${K8S_NAMESPACE:-default}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
      - ./deploy/kubernetes:/app/deploy/kubernetes
      # 如果需要访问宿主机的kubeconfig
      - ${HOME}/.kube:/root/.kube:ro
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - aiops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command:
      ["python", "-m", "app.mcp.main", "--host", "0.0.0.0", "--port", "9000"]

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: aiops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./deploy/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
      - "--storage.tsdb.retention.time=30d"
    restart: unless-stopped
    networks:
      - aiops-network

  ollama:
    image: ollama/ollama:latest
    container_name: aiops-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=24h
    restart: unless-stopped
    networks:
      - aiops-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    # 预拉取常用模型
    command: >
      sh -c "ollama serve &
             sleep 10 &&
             ollama pull qwen2.5:3b &&
             wait"

  redis:
    image: redis:7-alpine
    container_name: aiops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - aiops-network

volumes:
  prometheus_data:
    driver: local

  ollama_data:
    driver: local
  redis_data:
    driver: local

networks:
  aiops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
