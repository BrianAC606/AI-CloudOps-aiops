# 综合问题演示
# 包含多种问题类型的复杂场景，用于测试RCA引擎的综合分析能力
apiVersion: v1
kind: Namespace
metadata:
  name: rca-test-complex
  labels:
    test-scenario: "complex-issues"
    created-by: "rca-testing"
---
# 资源配额限制
apiVersion: v1
kind: ResourceQuota
metadata:
  name: complex-quota
  namespace: rca-test-complex
spec:
  hard:
    requests.cpu: "1000m"
    requests.memory: "2Gi" 
    limits.cpu: "2000m"
    limits.memory: "4Gi"
    pods: "10"
    services: "5"
---
# 应用1: 内存泄漏 + 网络问题
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memory-leak-app
  namespace: rca-test-complex
  labels:
    app: memory-leak
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: memory-leak
  template:
    metadata:
      labels:
        app: memory-leak
        tier: frontend
    spec:
      containers:
      - name: leaky-frontend
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "前端应用启动中..."
          # 模拟内存泄漏
          memory_data=""
          counter=0
          while true; do
            # 每次循环都追加数据，模拟内存泄漏
            memory_data="$memory_data$(date)_$(seq 1 1000 | tr '\n' '_')"
            counter=$((counter + 1))
            
            # 尝试连接后端服务（会失败）
            echo "尝试连接后端服务... 次数: $counter"
            timeout 2 nc -zv nonexistent-backend 8080 2>&1 || echo "后端连接失败"
            timeout 2 nc -zv broken-database 5432 2>&1 || echo "数据库连接失败"
            
            # 每10次循环输出内存使用情况
            if [ $((counter % 10)) -eq 0 ]; then
              echo "内存泄漏检查: 累积数据大小约为 $((${#memory_data} / 1024))KB"
              if [ ${#memory_data} -gt 1000000 ]; then
                echo "内存使用过高，触发OOM..."
                # 继续分配更多内存直到OOM
                while true; do
                  memory_data="$memory_data$(seq 1 10000)"
                done
              fi
            fi
            sleep 1
          done
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"  # 限制较小，容易OOM
            cpu: "100m"
        env:
        - name: BACKEND_URL
          value: "http://nonexistent-backend:8080"
        - name: DB_HOST
          value: "broken-database"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
---
# 应用2: CPU密集 + 镜像拉取问题
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cpu-image-problem-app
  namespace: rca-test-complex
  labels:
    app: cpu-image-problem
    tier: worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cpu-image-problem
  template:
    metadata:
      labels:
        app: cpu-image-problem
        tier: worker
    spec:
      containers:
      - name: cpu-worker
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "CPU密集型worker启动..."
          # 启动多个CPU密集型任务
          for i in 1 2 3 4; do
            (
              while true; do
                # 数学计算
                result=0
                for n in $(seq 1 10000); do
                  result=$((result + n * n))
                done
                echo "Worker $i 计算完成: $result"
              done
            ) &
          done
          wait
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"  # CPU限制较小，会被频繁限制
      - name: sidecar-problem
        image: "private-registry.local/sidecar:latest"  # 不存在的镜像
        imagePullPolicy: Always
        command:
        - /bin/sidecar
        - --config=/etc/sidecar/config.yaml
        resources:
          requests:
            memory: "64Mi"
            cpu: "25m"
          limits:
            memory: "128Mi"
            cpu: "50m"
      imagePullSecrets:
      - name: missing-pull-secret
---
# 应用3: 崩溃循环 + 磁盘压力
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crash-disk-app
  namespace: rca-test-complex
  labels:
    app: crash-disk
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crash-disk
  template:
    metadata:
      labels:
        app: crash-disk
        tier: backend
    spec:
      containers:
      - name: unstable-backend
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "不稳定后端服务启动..."
          mkdir -p /data/logs /data/temp
          
          # 并发执行磁盘操作和随机崩溃
          (
            # 磁盘压力任务
            while true; do
              echo "写入大量日志数据..."
              for i in $(seq 1 100); do
                echo "$(date '+%Y-%m-%d %H:%M:%S') [INFO] Backend: 大量日志数据 $i" >> /data/logs/backend.log
              done
              
              # 创建临时文件
              dd if=/dev/zero of=/data/temp/large_$$.tmp bs=1M count=20 2>/dev/null
              sync
              sleep 2
              rm -f /data/temp/large_$$.tmp
            done
          ) &
          
          # 主应用逻辑（会随机崩溃）
          attempt=0
          while true; do
            attempt=$((attempt + 1))
            echo "后端服务运行中，尝试 $attempt"
            
            # 随机崩溃
            crash_type=$((RANDOM % 5))
            sleep_time=$((RANDOM % 30 + 10))
            sleep $sleep_time
            
            case $crash_type in
              0)
                echo "PANIC: 数据库死锁！"
                exit 1
                ;;
              1) 
                echo "FATAL: 内存访问越界！"
                kill -SEGV $$
                ;;
              2)
                echo "ERROR: 配置文件损坏！"
                exit 2
                ;;
              *)
                echo "继续运行..."
                ;;
            esac
          done
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: data-storage
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "pgrep -f 'unstable-backend' && df /data"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 2
        readinessProbe:
          exec:
            command:
            - sh  
            - -c
            - "echo 'readiness check'; exit 1"  # 始终失败
          initialDelaySeconds: 5
          periodSeconds: 3
          failureThreshold: 1
      volumes:
      - name: data-storage
        emptyDir:
          sizeLimit: "500Mi"
      restartPolicy: Always
---
# 有问题的服务配置
apiVersion: v1
kind: Service
metadata:
  name: broken-frontend-service
  namespace: rca-test-complex
spec:
  selector:
    app: nonexistent-app  # 错误的选择器
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP
---
apiVersion: v1
kind: Service  
metadata:
  name: backend-service
  namespace: rca-test-complex
spec:
  selector:
    app: crash-disk
  ports:
  - port: 8080
    targetPort: 8080
  - port: 5432
    targetPort: 5432
    name: postgres
  type: ClusterIP
---
# 错误的Endpoints配置
apiVersion: v1
kind: Endpoints
metadata:
  name: backend-service
  namespace: rca-test-complex
subsets:
- addresses:
  - ip: "192.168.254.254"  # 不可达的IP
  ports:
  - port: 8080
  - port: 5432
---
# 限制性网络策略
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-policy
  namespace: rca-test-complex
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  egress:
  - to: []
    ports:
    - protocol: UDP
      port: 53  # 只允许DNS
  ingress: []  # 禁止入站流量
---
# 错误的ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: broken-config
  namespace: rca-test-complex
data:
  database.conf: |
    host=nonexistent-db.local
    port=invalid_port
    username=wrong_user
    password=wrong_pass
    timeout=invalid_timeout
  app.yaml: |
    server:
      host: 0.0.0.0
      port: "not_a_number"
    database:
      url: "broken://connection/string"
    logging:
      level: INVALID_LEVEL
---
# PVC配额压力测试
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: large-pvc
  namespace: rca-test-complex
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi  # 可能超出集群可用存储