---
# 创建test命名空间
apiVersion: v1
kind: Namespace
metadata:
  name: test
  labels:
    purpose: rca-testing
    environment: test

---
# 资源配额限制 - 故意设置很低的限制来触发资源不足问题
apiVersion: v1
kind: ResourceQuota
metadata:
  name: test-quota
  namespace: test
spec:
  hard:
    requests.cpu: "100m"
    requests.memory: "128Mi"
    limits.cpu: "200m"
    limits.memory: "256Mi"
    pods: "5"

---
# 故意OOM的应用 - 内存不足问题
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memory-hog
  namespace: test
  labels:
    app: memory-hog
    problem-type: oom
spec:
  replicas: 1
  selector:
    matchLabels:
      app: memory-hog
  template:
    metadata:
      labels:
        app: memory-hog
    spec:
      containers:
      - name: memory-hog
        image: busybox:1.35
        command: 
        - sh
        - -c
        - |
          echo "开始消耗内存..."
          # 分配大量内存导致OOM
          dd if=/dev/zero of=/tmp/memory bs=1M count=500
          sleep 30
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"  # 故意设置较低的内存限制
            cpu: "100m"
      restartPolicy: Always

---
# CPU密集型应用 - CPU节流问题
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cpu-stress
  namespace: test
  labels:
    app: cpu-stress
    problem-type: cpu-throttling
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cpu-stress
  template:
    metadata:
      labels:
        app: cpu-stress
    spec:
      containers:
      - name: cpu-stress
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "开始CPU密集计算..."
          # 创建CPU密集型负载
          while true; do
            for i in $(seq 1 1000000); do
              echo $i > /dev/null
            done
          done
        resources:
          requests:
            cpu: "10m"
            memory: "32Mi"
          limits:
            cpu: "50m"  # 故意设置很低的CPU限制来触发throttling
            memory: "64Mi"

---
# 崩溃循环应用 - CrashLoopBackOff问题
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crash-loop
  namespace: test
  labels:
    app: crash-loop
    problem-type: crash-loop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crash-loop
  template:
    metadata:
      labels:
        app: crash-loop
    spec:
      containers:
      - name: crash-loop
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "应用启动..."
          sleep 10
          echo "模拟应用崩溃"
          exit 1  # 故意退出导致重启
        resources:
          requests:
            cpu: "10m"
            memory: "32Mi"
          limits:
            cpu: "50m"
            memory: "64Mi"

---
# 镜像拉取失败 - ImagePullBackOff问题
apiVersion: apps/v1
kind: Deployment
metadata:
  name: image-pull-fail
  namespace: test
  labels:
    app: image-pull-fail
    problem-type: image-pull-error
spec:
  replicas: 1
  selector:
    matchLabels:
      app: image-pull-fail
  template:
    metadata:
      labels:
        app: image-pull-fail
    spec:
      containers:
      - name: image-pull-fail
        image: nonexistent-registry.com/fake-image:latest  # 故意使用不存在的镜像
        imagePullPolicy: Always
        resources:
          requests:
            cpu: "10m"
            memory: "32Mi"

---
# 网络问题模拟 - 创建一个尝试连接不存在服务的应用
apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-error
  namespace: test
  labels:
    app: network-error
    problem-type: network-issue
spec:
  replicas: 1
  selector:
    matchLabels:
      app: network-error
  template:
    metadata:
      labels:
        app: network-error
    spec:
      containers:
      - name: network-error
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "尝试网络连接..."
          while true; do
            # 尝试连接不存在的服务
            wget -T 5 http://nonexistent-service:8080 || echo "连接失败"
            nc -zv nonexistent-host.com 80 || echo "网络连接超时"
            sleep 30
          done
        resources:
          requests:
            cpu: "10m"
            memory: "32Mi"
          limits:
            cpu: "50m"
            memory: "64Mi"

---
# 日志错误生成器 - 生成各种类型的错误日志
apiVersion: apps/v1
kind: Deployment
metadata:
  name: error-logger
  namespace: test
  labels:
    app: error-logger
    problem-type: application-errors
spec:
  replicas: 1
  selector:
    matchLabels:
      app: error-logger
  template:
    metadata:
      labels:
        app: error-logger
    spec:
      containers:
      - name: error-logger
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "开始生成错误日志..."
          while true; do
            echo "$(date) ERROR: Database connection failed: Connection refused" >&2
            echo "$(date) FATAL: Out of memory exception in thread main" >&2
            echo "$(date) ERROR: HTTP 500 Internal Server Error" >&2
            echo "$(date) WARN: High CPU usage detected: 95%" >&2
            echo "$(date) ERROR: Disk space full: /var/log" >&2
            echo "$(date) Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space" >&2
            sleep 15
          done
        resources:
          requests:
            cpu: "10m"
            memory: "32Mi"
          limits:
            cpu: "50m"
            memory: "64Mi"

---
# 服务定义 - 虽然这些服务可能不会正常工作，但会生成事件
apiVersion: v1
kind: Service
metadata:
  name: test-service
  namespace: test
spec:
  selector:
    app: memory-hog
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP
